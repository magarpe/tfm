// Generated by gencpp from file ccmslam_msgs/UIntVec.msg
// DO NOT EDIT!


#ifndef CCMSLAM_MSGS_MESSAGE_UINTVEC_H
#define CCMSLAM_MSGS_MESSAGE_UINTVEC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccmslam_msgs
{
template <class ContainerAllocator>
struct UIntVec_
{
  typedef UIntVec_<ContainerAllocator> Type;

  UIntVec_()
    : uintvec()  {
    }
  UIntVec_(const ContainerAllocator& _alloc)
    : uintvec(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _uintvec_type;
  _uintvec_type uintvec;





  typedef boost::shared_ptr< ::ccmslam_msgs::UIntVec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccmslam_msgs::UIntVec_<ContainerAllocator> const> ConstPtr;

}; // struct UIntVec_

typedef ::ccmslam_msgs::UIntVec_<std::allocator<void> > UIntVec;

typedef boost::shared_ptr< ::ccmslam_msgs::UIntVec > UIntVecPtr;
typedef boost::shared_ptr< ::ccmslam_msgs::UIntVec const> UIntVecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccmslam_msgs::UIntVec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccmslam_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ccmslam_msgs': ['/home/marina/ccmslam_ws/src/ccm_slam/cslam_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccmslam_msgs::UIntVec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccmslam_msgs::UIntVec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccmslam_msgs::UIntVec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4639613f2da593b427bc5b53e131a909";
  }

  static const char* value(const ::ccmslam_msgs::UIntVec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4639613f2da593b4ULL;
  static const uint64_t static_value2 = 0x27bc5b53e131a909ULL;
};

template<class ContainerAllocator>
struct DataType< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccmslam_msgs/UIntVec";
  }

  static const char* value(const ::ccmslam_msgs::UIntVec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32[] uintvec\n\
";
  }

  static const char* value(const ::ccmslam_msgs::UIntVec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uintvec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UIntVec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccmslam_msgs::UIntVec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccmslam_msgs::UIntVec_<ContainerAllocator>& v)
  {
    s << indent << "uintvec[]" << std::endl;
    for (size_t i = 0; i < v.uintvec.size(); ++i)
    {
      s << indent << "  uintvec[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.uintvec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMSLAM_MSGS_MESSAGE_UINTVEC_H
