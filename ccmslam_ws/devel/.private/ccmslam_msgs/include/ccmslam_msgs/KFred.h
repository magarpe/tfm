// Generated by gencpp from file ccmslam_msgs/KFred.msg
// DO NOT EDIT!


#ifndef CCMSLAM_MSGS_MESSAGE_KFRED_H
#define CCMSLAM_MSGS_MESSAGE_KFRED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccmslam_msgs
{
template <class ContainerAllocator>
struct KFred_
{
  typedef KFred_<ContainerAllocator> Type;

  KFred_()
    : mnId(0)
    , mClientId(0)
    , mUniqueId(0)
    , mbAck(false)
    , mTcpred()
    , mTcpar()
    , mpPred_KfId(0)
    , mpPred_KfClientId(0)
    , mpPar_KfId(0)
    , mpPar_KfClientId(0)
    , mbServerBA(false)
    , mbBad(false)  {
      mTcpred.assign(0.0);

      mTcpar.assign(0.0);
  }
  KFred_(const ContainerAllocator& _alloc)
    : mnId(0)
    , mClientId(0)
    , mUniqueId(0)
    , mbAck(false)
    , mTcpred()
    , mTcpar()
    , mpPred_KfId(0)
    , mpPred_KfClientId(0)
    , mpPar_KfId(0)
    , mpPar_KfClientId(0)
    , mbServerBA(false)
    , mbBad(false)  {
  (void)_alloc;
      mTcpred.assign(0.0);

      mTcpar.assign(0.0);
  }



   typedef uint16_t _mnId_type;
  _mnId_type mnId;

   typedef uint8_t _mClientId_type;
  _mClientId_type mClientId;

   typedef uint32_t _mUniqueId_type;
  _mUniqueId_type mUniqueId;

   typedef uint8_t _mbAck_type;
  _mbAck_type mbAck;

   typedef boost::array<float, 16>  _mTcpred_type;
  _mTcpred_type mTcpred;

   typedef boost::array<float, 16>  _mTcpar_type;
  _mTcpar_type mTcpar;

   typedef uint16_t _mpPred_KfId_type;
  _mpPred_KfId_type mpPred_KfId;

   typedef uint8_t _mpPred_KfClientId_type;
  _mpPred_KfClientId_type mpPred_KfClientId;

   typedef uint16_t _mpPar_KfId_type;
  _mpPar_KfId_type mpPar_KfId;

   typedef uint8_t _mpPar_KfClientId_type;
  _mpPar_KfClientId_type mpPar_KfClientId;

   typedef uint8_t _mbServerBA_type;
  _mbServerBA_type mbServerBA;

   typedef uint8_t _mbBad_type;
  _mbBad_type mbBad;





  typedef boost::shared_ptr< ::ccmslam_msgs::KFred_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccmslam_msgs::KFred_<ContainerAllocator> const> ConstPtr;

}; // struct KFred_

typedef ::ccmslam_msgs::KFred_<std::allocator<void> > KFred;

typedef boost::shared_ptr< ::ccmslam_msgs::KFred > KFredPtr;
typedef boost::shared_ptr< ::ccmslam_msgs::KFred const> KFredConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccmslam_msgs::KFred_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccmslam_msgs::KFred_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ccmslam_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ccmslam_msgs': ['/home/marina/ccmslam_ws/src/ccm_slam/cslam_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ccmslam_msgs::KFred_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccmslam_msgs::KFred_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccmslam_msgs::KFred_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccmslam_msgs::KFred_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccmslam_msgs::KFred_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccmslam_msgs::KFred_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccmslam_msgs::KFred_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a8aed18ba662f03ebe82d1ab206ea57";
  }

  static const char* value(const ::ccmslam_msgs::KFred_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a8aed18ba662f03ULL;
  static const uint64_t static_value2 = 0xebe82d1ab206ea57ULL;
};

template<class ContainerAllocator>
struct DataType< ::ccmslam_msgs::KFred_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccmslam_msgs/KFred";
  }

  static const char* value(const ::ccmslam_msgs::KFred_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccmslam_msgs::KFred_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 mnId # unique KF id\n\
uint8 mClientId # client id\n\
uint32 mUniqueId\n\
bool mbAck\n\
\n\
#Poses\n\
    float32[16] mTcpred\n\
    float32[16] mTcpar\n\
\n\
    uint16 mpPred_KfId\n\
    uint8 mpPred_KfClientId\n\
\n\
    uint16 mpPar_KfId\n\
    uint8 mpPar_KfClientId\n\
\n\
    bool mbServerBA\n\
\n\
#Bad flags\n\
    bool mbBad\n\
";
  }

  static const char* value(const ::ccmslam_msgs::KFred_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccmslam_msgs::KFred_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mnId);
      stream.next(m.mClientId);
      stream.next(m.mUniqueId);
      stream.next(m.mbAck);
      stream.next(m.mTcpred);
      stream.next(m.mTcpar);
      stream.next(m.mpPred_KfId);
      stream.next(m.mpPred_KfClientId);
      stream.next(m.mpPar_KfId);
      stream.next(m.mpPar_KfClientId);
      stream.next(m.mbServerBA);
      stream.next(m.mbBad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KFred_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccmslam_msgs::KFred_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccmslam_msgs::KFred_<ContainerAllocator>& v)
  {
    s << indent << "mnId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mnId);
    s << indent << "mClientId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mClientId);
    s << indent << "mUniqueId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mUniqueId);
    s << indent << "mbAck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mbAck);
    s << indent << "mTcpred[]" << std::endl;
    for (size_t i = 0; i < v.mTcpred.size(); ++i)
    {
      s << indent << "  mTcpred[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mTcpred[i]);
    }
    s << indent << "mTcpar[]" << std::endl;
    for (size_t i = 0; i < v.mTcpar.size(); ++i)
    {
      s << indent << "  mTcpar[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mTcpar[i]);
    }
    s << indent << "mpPred_KfId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mpPred_KfId);
    s << indent << "mpPred_KfClientId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mpPred_KfClientId);
    s << indent << "mpPar_KfId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mpPar_KfId);
    s << indent << "mpPar_KfClientId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mpPar_KfClientId);
    s << indent << "mbServerBA: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mbServerBA);
    s << indent << "mbBad: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mbBad);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMSLAM_MSGS_MESSAGE_KFRED_H
